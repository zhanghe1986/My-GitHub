package com.hikvision.cms.cache.manager;
import java.io.UnsupportedEncodingException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.hikvision.cms.cache.core.common.CacheConstants.DATA_TYPE;
import com.hikvision.cms.cache.core.exception.CacheConnectException;
import com.hikvision.cms.cache.core.tools.CacheUtil;
import com.hikvision.cms.cache.manager.serialize.XmlSerializer;
import com.ivms6.core.util.StringUtils;
import com.thoughtworks.xstream.XStreamException;

/**
 * 使用memcached来实现的缓存。
 * <p>
 * 其中数据类型为DATA_TYPE.SESSION的数据会有备份数据，其他数据只存一份<br>
 * 另外返回空为空，抛出异常为去服务器获取数据异常，需要区别对待<br>
 * </p>
 * @version V1.0
 */
public class MemcacheStore implements IDataStore {
	private Logger log = LoggerFactory.getLogger(MemcacheStore.class);
	private XmlSerializer serializer = new XmlSerializer();
	
	@Override
	public String get(String key) throws DataLoadException {
		try {
	        return (String)CacheUtil.get(key);
        } catch (CacheConnectException e) {
        	recordSystemLog(key,"",e,"get");
	        throw new DataLoadException(e);
        }
	}
	
	//如果缓存不能够连接上，将缓存错误记录到数据库中
	private void recordSystemLog(String key, String value, Throwable ce, String action) {
		log.info("write system log for cache error.key:" + key + ",value:" + value);
    }
	
//	private Throwable getCauseException(Throwable e){
//		if (e.getCause() != null) {
//			return getCauseException(e.getCause());
//		}else{
//			return e;
//		}
//	}
	

	@Override
	public boolean set(String key, String value)  throws DataLoadException{
		return set(key,value,0);
	}

	@Override
    public boolean set(String key, String value, long exp) throws DataLoadException {
		try {
	        CacheUtil.set(key, value,exp);
        } catch (CacheConnectException e) {
        	recordSystemLog(key,value,e,"set");
        	throw new DataLoadException(e);
        }
        return true;
    }

	@Override
    public boolean remove(String key) throws DataLoadException {
		try {
			CacheUtil.delete(key);
		 } catch (CacheConnectException e) {
	        	recordSystemLog(key,"",e,"remove");
	        	throw new DataLoadException(e);
	     }
	     return true;
    }

	@Override
    public String get(String key, DATA_TYPE type) throws DataLoadException {
		try {
	        return (String)CacheUtil.get(key,type);
        } catch (CacheConnectException e) {
        	recordSystemLog(key,"",e,"get");
	       throw new DataLoadException(e);
        }
    }

	@Override
    public boolean remove(String key, DATA_TYPE type) throws DataLoadException {
		try {
			CacheUtil.delete(key,type);
		 } catch (CacheConnectException e) {
	        	recordSystemLog(key,"",e,"remove");
	        	throw new DataLoadException(e);
	     }
	     return true;
    }

	@Override
    public boolean set(String key, String value, DATA_TYPE type) throws DataLoadException {
		try {
	        CacheUtil.set(key, (Object)value,type);
        } catch (CacheConnectException e) {
        	recordSystemLog(key,value,e,"set");
        	throw new DataLoadException(e);
        }
        return true;
    }

	@Override
    public boolean set(String key, String value, long exp, DATA_TYPE type) throws DataLoadException {
		try {
	        CacheUtil.set(key, (Object)value,exp,type);
        } catch (CacheConnectException e) {
        	recordSystemLog(key,value,e,"set");
        	throw new DataLoadException(e);
        }
        return true;
    }
	@Override
    public Object getObject(String key) throws DataLoadException {
		return getObject(key,DATA_TYPE.TEMP);
    }

	@Override
    public boolean setObject(String key, Object value) throws DataLoadException {
		 return setObject(key,value,0,DATA_TYPE.TEMP);
    }

	@Override
    public boolean setObject(String key, Object value, long exp) throws DataLoadException {
	    return setObject(key,value,exp,DATA_TYPE.TEMP);
    }

	@Override
    public boolean setObject(String key, Object value, long exp, DATA_TYPE type) throws DataLoadException {
		String xml = "";
		try {
			xml =serializer.serialize(value);;
			if(StringUtils.isEmpty(xml)){
				return false;
			}
			try {
	            if(xml.getBytes("utf-8").length > XML_MAX_LENGTH){
	            	DataLoadException e = new DataLoadException("object is too big to save.");
	            	recordSystemLog(key,xml,e,"setObject");
	            	throw e;
	            }
            } catch (UnsupportedEncodingException e) {
            	recordSystemLog(key,xml,e,"setObject");
            	throw new DataLoadException("object is illegal.",e);
            }
	        CacheUtil.set(key, xml,exp,type);
        } catch (CacheConnectException e) {
        	recordSystemLog(key,xml,e,"setObject");
        	throw new DataLoadException(e);
        }catch(XStreamException e){
        	recordSystemLog(key,xml,e,"setObject");
        	throw new DataLoadException("serialized value error.",e);
        }
	    return false;
    }

	@Override
    public Object getObject(String key, DATA_TYPE type) throws DataLoadException {
		try {
	        String xml = (String)CacheUtil.get(key,type);
	        Object value = serializer.unSerialize(xml);
	        return value; 
        } catch (CacheConnectException e) {
        	recordSystemLog(key,"",e,"getObject");
        	throw new DataLoadException(e);
        } catch(XStreamException e){
        	recordSystemLog(key,"",e,"setObject");
        	throw new DataLoadException("deserialized value error.",e);
        }
    }

	@Override
    public boolean setObject(String key, Object value, DATA_TYPE type) throws DataLoadException {
	    return setObject(key, value, 0, type);
    }
}